generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cms {
  id        Int      @id @default(autoincrement())
  name      String
  content   String?
  status    Status   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Community {
  id        Int             @id @default(autoincrement())
  userId    Int?
  message   String
  status    CommunityStatus @default(active)
  createdAt DateTime        @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Jakarta'::text)"))
  updatedAt DateTime        @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Jakarta'::text)"))
  User      User?           @relation(fields: [userId], references: [id])
}

model Experience {
  id          Int            @id @default(autoincrement())
  type        ExperienceType
  title       String
  institution String
  startDate   DateTime
  endDate     DateTime?
  description String?
  status      Status         @default(active)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Likes {
  id          Int      @id(map: "likes_pkey") @default(autoincrement())
  userId      Int?
  device_name String?  @db.VarChar
  user_argent String?  @db.VarChar
  ip_address  String?  @db.VarChar
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  User        User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "likes_userId_fkey")
}

model PortoJenis {
  id         Int          @id @default(autoincrement())
  name       String
  status     Status
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  Portofolio Portofolio[]
}

model Portofolio {
  id           Int             @id @default(autoincrement())
  portoJenisId Int
  title        String
  image        String
  url          String
  description  String
  isPrimary    Boolean
  category     String
  status       PortfolioStatus
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  PortoJenis   PortoJenis      @relation(fields: [portoJenisId], references: [id])
}

model Sertifikat {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  status    Status
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Skill {
  id        Int         @id @default(autoincrement())
  name      String
  image     String
  bagan     Int
  status    SkillStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  createdAt DateTime    @default(now())
  password  String
  updatedAt DateTime
  role      String
  Community Community[]
  Likes     Likes[]
}

enum CommunityStatus {
  active
  draft
  archived
}

enum ExperienceType {
  work
  competition
}

enum PortfolioStatus {
  active
  ongoing
  draft
}

enum SkillStatus {
  active
  draft
}

enum Status {
  active
  draft
}
